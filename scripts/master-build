#!/bin/bash
#
# master-build output_path [ force ]
#

output_path="$1"

force="$2"

FAT_SIZE=256

BOARDS_SMP="geni586 geni586-serial"

BOARDS_NO_SMP="net5501 alix"

RUNFS_DIR="output/build/runfs"

build_board()
{
  local firmware="$1" img="$2"

  mkdir "$output_path/$firmware/$board"
  mkdir "$output_path/$img/$board"

  ./scripts/build $board

  if [ $? -ne 0 ]; then
    exit 1
  fi

  ASTVER="$(cat ${RUNFS_DIR}/os/ver)"

  if [ -z "$ASTVER" ]; then
    echo "master-build: missing runfs version file."
    exit 1
  fi

  ./scripts/astlinux-makeimage -z $FAT_SIZE $FAT_SIZE 0

  mv "${ASTVER}.tar.gz" "$output_path/$firmware/$board/${ASTVER}.tar.gz"
  mv "${ASTVER}.tar.gz.sha1" "$output_path/$firmware/$board/${ASTVER}.tar.gz.sha1"
  mv "${ASTVER}.img.gz" "$output_path/$img/$board/${ASTVER}-${ASTERISK_VERSION}.img.gz"

  rm -rf "${ASTVER}"
}

set_smp_kernel()
{
  sed -i 's:^BR2_LINUX_KERNEL_CUSTOM_CONFIG_FILE="[^"]*":BR2_LINUX_KERNEL_CUSTOM_CONFIG_FILE="project/astlinux/geni586/linux-smp.config":' .config
}

set_asterisk_version()
{
  case $1 in
    ast18)
      CONFIG="astlinux18.config"
      ASTERISK_VERSION="$(awk -F'=' '/^ASTERISK_VERSION/ { if ($2 ~ /^ *1.8/) {print $2; exit} }' package/asterisk/asterisk.mk)"
      ASTERISK_VERSION="asterisk-${ASTERISK_VERSION// /}"
      FIRMWARE="ast18-firmware-1.x"
      IMG="ast18-img"
      ;;
    ast11)
      CONFIG="astlinux-ast11.config"
      ASTERISK_VERSION="$(awk -F'=' '/^ASTERISK_VERSION/ { if ($2 ~ /^ *11./) {print $2; exit} }' package/asterisk/asterisk.mk)"
      ASTERISK_VERSION="asterisk-${ASTERISK_VERSION// /}"
      FIRMWARE="ast11-firmware-1.x"
      IMG="ast11-img"
      ;;
    ast13)
      CONFIG="astlinux-ast13.config"
      ASTERISK_VERSION="$(awk -F'=' '/^ASTERISK_VERSION/ { if ($2 ~ /^ *13./) {print $2; exit} }' package/asterisk/asterisk.mk)"
      ASTERISK_VERSION="asterisk-${ASTERISK_VERSION// /}"
      FIRMWARE="ast13-firmware-1.x"
      IMG="ast13-img"
      ;;
    *)
      echo "master-build: Unknown Asterisk Version."
      exit 1
      ;;
  esac
}

if [ -z "$output_path" ]; then
  echo "usage: master-build output_path [ force ]"
  exit 1
fi

if [ -d "$output_path" ]; then
  if [ "$force" = "force" ]; then
    rm -rf "$output_path"
    if ! mkdir "$output_path"; then
      exit 1
    fi
  else
    echo "master-build: directory \"$output_path\" exists, use 'force' verb to override."
    exit 1
  fi
else
  if ! mkdir "$output_path"; then
    exit 1
  fi
fi

echo "Regenerate the initrd"
rm -f initrd.img

#
# Build Asterisk 1.8, 11 and 13 versions of AstLinux
#

for asterisk in ast18 ast11 ast13; do

  set_asterisk_version $asterisk

  if ! mkdir "$output_path/$FIRMWARE"; then
    exit 1
  fi
  if ! mkdir "$output_path/$IMG"; then
    exit 1
  fi

  # Non-SMP Builds
  echo "Cleaning out any existing builds..."
  rm -rf output

  cp "$CONFIG" .config

  for board in $BOARDS_NO_SMP; do
    build_board "$FIRMWARE" "$IMG"
  done

  # SMP Builds
  echo "Cleaning out any existing builds..."
  rm -rf output

  cp "$CONFIG" .config
  set_smp_kernel

  for board in $BOARDS_SMP; do
    build_board "$FIRMWARE" "$IMG"
  done
done

echo "
##
## Master Build Successful for ${ASTVER}
##
"

