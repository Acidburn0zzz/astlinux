--- monit/src/spawn.c.orig	2014-12-13 12:50:23.000000000 -0600
+++ monit/src/spawn.c	2014-12-13 13:16:12.000000000 -0600
@@ -271,3 +271,89 @@
 
 }
 
+/**
+ * Execute the given command, like spawn() but for a single shell command
+ */
+void spawn_system_cmd(const char *cmd) {
+        pid_t pid;
+        sigset_t mask;
+        sigset_t save;
+        int stat_loc = 0;
+        int exit_status;
+
+        /*
+         * Block SIGCHLD
+         */
+        sigemptyset(&mask);
+        sigaddset(&mask, SIGCHLD);
+        pthread_sigmask(SIG_BLOCK, &mask, &save);
+
+        pid = fork();
+        if (pid < 0) {
+                LogError("Cannot fork a new process -- %s\n", STRERROR);
+                pthread_sigmask(SIG_SETMASK, &save, NULL);
+                return;
+        }
+
+        if (pid == 0) {
+
+                if (! (Run.flags & Run_Daemon)) {
+                        for (int i = 0; i < 3; i++)
+                                if (close(i) == -1 || open("/dev/null", O_RDWR) != i)
+                                        stat_loc |= redirect_ERROR;
+                }
+
+                Util_closeFds();
+
+                setsid();
+
+                pid = fork();
+                if (pid < 0) {
+                        stat_loc |= fork_ERROR;
+                        _exit(stat_loc);
+                }
+
+                if (pid == 0) {
+                        /*
+                         * Reset all signals, so the spawned process is *not* created
+                         * with any inherited SIG_BLOCKs
+                         */
+                        sigemptyset(&mask);
+                        pthread_sigmask(SIG_SETMASK, &mask, NULL);
+                        signal(SIGINT, SIG_DFL);
+                        signal(SIGHUP, SIG_DFL);
+                        signal(SIGTERM, SIG_DFL);
+                        signal(SIGUSR1, SIG_DFL);
+                        signal(SIGPIPE, SIG_DFL);
+
+                        (void) execl("/bin/sh", "/bin/sh", "-c", cmd, (char *) NULL);
+                        _exit(errno);
+                }
+
+                /* Exit first child and return errors to parent */
+                _exit(stat_loc);
+        }
+
+        /* Wait for first child - aka second parent, to exit */
+        if (waitpid(pid, &stat_loc, 0) != pid) {
+                LogError("Waitpid error\n");
+        }
+
+        exit_status = WEXITSTATUS(stat_loc);
+        if (exit_status & fork_ERROR)
+                LogError("Cannot fork a new process for '%s'\n", cmd);
+        if (exit_status & redirect_ERROR)
+                LogError("Cannot redirect IO to /dev/null for '%s'\n", cmd);
+
+        /*
+         * Restore the signal mask
+         */
+        pthread_sigmask(SIG_SETMASK, &save, NULL);
+
+        /*
+         * We do not need to wait for the second child since we forked twice,
+         * the init system-process will wait for it. So we just return
+         */
+
+}
+
