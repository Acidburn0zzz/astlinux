--- a/ddclient	2017-01-19 11:36:50.208744563 -0600
+++ b/ddclient	2017-01-19 11:35:44.265920224 -0600
@@ -439,7 +439,7 @@
 	'zone'                => setv(T_STRING, 1, 1, 1, '',                  undef),
     },
 	'cloudflare-common-defaults'       => {
-		'server'	      => setv(T_FQDNP,  1, 0, 1, 'www.cloudflare.com', undef),
+		'server'	      => setv(T_FQDNP,  1, 0, 1, 'api.cloudflare.com/client/v4', undef),
 		'zone'                => setv(T_FQDN,   1, 0, 1, '',                  undef),
 		'static'              => setv(T_BOOL,   0, 1, 1, 0,                   undef),
 		'wildcard'            => setv(T_BOOL,   0, 1, 1, 0,                   undef),
@@ -613,7 +613,7 @@
         'update'     => \&nic_cloudflare_update,
         'examples'   => \&nic_cloudflare_examples,
         'variables'  => merge(
-            { 'server'       => setv(T_FQDNP,  1, 0, 1, 'www.cloudflare.com', undef)          },
+            { 'server'       => setv(T_FQDNP,  1, 0, 1, 'api.cloudflare.com/client/v4', undef) },
             { 'min-interval' => setv(T_DELAY,  0, 0, 1, interval('5m'), 0),},
             $variables{'cloudflare-common-defaults'},
             $variables{'service-common-defaults'},
@@ -1894,6 +1894,9 @@
     my $url      = shift || '';
     my $login    = shift || '';
     my $password = shift || '';
+    my $headers  = shift || '';
+    my $method   = shift || 'GET';
+    my $data     = shift || '';
     my ($peer, $server, $port, $default_port, $use_ssl);
     my ($sd, $rq, $request, $reply);
 
@@ -1934,7 +1937,7 @@
     my $to =  sprintf "%s%s", $server, $proxy ? " via proxy $peer:$port" : "";
     verbose("CONNECT:", "%s", $to);
 
-    $request  = "GET ";
+    $request  = "$method ";
     $request .= "http://$server" if $proxy;
     $request .= "/$url HTTP/1.0\n";
     $request .= "Host: $server\n";
@@ -1943,7 +1946,10 @@
     $request .= "Authorization: Basic $auth\n" if $login || $password;
     $request .= "User-Agent: ${program}/${version}\n";
     $request .= "Connection: close\n";
+    $request .= "$headers\n";
+    $request .= "Content-Length: ".length($data)."\n" if $data;
     $request .= "\n";
+    $request .= $data;
 
     ## make sure newlines are <cr><lf> for some pedantic proxy servers
     ($rq = $request) =~ s/\n/\r\n/g;
@@ -4010,7 +4016,7 @@
 
 Configuration variables applicable to the 'cloudflare' protocol are:
   protocol=cloudflare          ## 
-  server=fqdn.of.service       ## defaults to www.cloudflare.com
+  server=fqdn.of.service       ## defaults to api.cloudflare.com/client/v4
   login=service-login          ## login name and password  registered with the service
   password=service-password    ##
   fully.qualified.host         ## the host registered with the service.
@@ -4047,6 +4053,10 @@
 		my $key   = $hosts[0];
 		my $ip    = $config{$key}{'wantip'};
 
+		my $headers = "X-Auth-Email: $config{$key}{'login'}\n";
+		$headers .= "X-Auth-Key: $config{$key}{'password'}\n";
+		$headers .= "Content-Type: application/json";
+
 		# FQDNs
 		for my $domain (@hosts) {
 			(my $hostname = $domain) =~ s/\.$config{$key}{zone}$//;
@@ -4055,13 +4065,11 @@
 			info("setting IP address to %s for %s", $ip, $domain);
 			verbose("UPDATE:","updating %s", $domain);
 
-			# Get domain ID
-			my $url = "https://$config{$key}{'server'}/api_json.html?a=rec_load_all";
-			$url   .= "&z=".$config{$key}{'zone'};
-			$url   .= "&email=".$config{$key}{'login'};	
-			$url   .= "&tkn=".$config{$key}{'password'};
+			# Get zone ID
+			my $url = "https://$config{$key}{'server'}/zones?";
+			$url   .= "name=".$config{$key}{'zone'};
 
-			my $reply = geturl(opt('proxy'), $url);
+			my $reply = geturl(opt('proxy'), $url, undef, undef, $headers);
 			unless ($reply) {
 				failed("updating %s: Could not connect to %s.", $domain, $config{$key}{'server'});
 				last;
@@ -4077,24 +4085,44 @@
 			}
 
 			# Pull the ID out of the json, messy
-			my ($id) = map { $_->{name} eq $domain ? $_->{rec_id} : () } @{ $response->{response}->{recs}->{objs} };
-			unless($id) {
-				failed("updating %s: No domain ID found.", $domain);
+			my ($zone_id) = map { $_->{name} eq $config{$key}{'zone'} ? $_->{id} : () } @{ $response->{result} };
+			unless($zone_id) {
+				failed("updating %s: No zone ID found.", $config{$key}{'zone'});
 				next;
 			}
+			info("zone ID is $zone_id");
 
-			# Set domain
-			$url   = "https://$config{$key}{'server'}/api_json.html?a=rec_edit&type=A";
-			$url	 .= "&ttl=".$config{$key}{'ttl'};
-			$url     .= "&name=$hostname";
-			$url     .= "&z=".$config{$key}{'zone'};
-			$url     .= "&id=".$id;	
-			$url     .= "&email=".$config{$key}{'login'};	
-			$url     .= "&tkn=".$config{$key}{'password'};    
-			$url     .= "&content=";
-			$url     .= "$ip"       if $ip;
+			# Get DNS record ID
+			$url = "https://$config{$key}{'server'}/zones/$zone_id/dns_records?";
+			$url .= "type=A&name=$domain";
+
+			$reply = geturl(opt('proxy'), $url, undef, undef, $headers);
+			unless ($reply) {
+				failed("updating %s: Could not connect to %s.", $domain, $config{$key}{'server'});
+				last;
+			}
+			last if !header_ok($domain, $reply);
+
+			# Strip header
+			$reply =~ s/^.*?\n\n//s;
+			$response = JSON::Any->jsonToObj($reply);
+			if ($response->{result} eq 'error') {
+				failed ("%s", $response->{msg});
+				next; 
+			}
 
-			$reply = geturl(opt('proxy'), $url);
+			# Pull the ID out of the json, messy
+			my ($dns_rec_id) = map { $_->{name} eq $domain ? $_->{id} : () } @{ $response->{result} };
+			unless($dns_rec_id) {
+				failed("updating %s: No DNS record ID found.", $domain);
+				next;
+			}
+			info("DNS record ID is $dns_rec_id");
+
+			# Set domain
+			$url   = "https://$config{$key}{'server'}/zones/$zone_id/dns_records/$dns_rec_id";
+			my $data = "{\"content\":\"$ip\"}";
+			$reply = geturl(opt('proxy'), $url, undef, undef, $headers, "PATCH", $data);
 			unless ($reply) {
 				failed("updating %s: Could not connect to %s.", $domain, $config{$domain}{'server'});
 				last;
