#!/bin/sh

. /etc/rc.conf

init () {

  if [ -n "$STUNNELSERVS" ]; then

    SUSER="${STUNNELUSER:-nobody}"
    SDEBUG="${STUNNEL_DEBUGLEVEL:-5}"

    mkdir -p /var/run/stunnel
    chown ${SUSER}:${SUSER} /var/run/stunnel

    if [ "$STUNNEL_CLIENT" = "yes" ]; then
      SCLIENT="yes"
      SCERT="$STUNNELCERT"
    else  # Server mode
      SCLIENT=""
      if [ -n "$STUNNELCERT" ]; then
        SCERT="$STUNNELCERT"
      elif [ -n "$HTTPSCERT" ]; then
        SCERT="$HTTPSCERT"
      else
        SCERT="/etc/ssl/mini_httpd.pem"
      fi
    fi

    echo "; Autogenerated.  Do not edit.
${SCLIENT:+
client = $SCLIENT}${SCERT:+
cert = $SCERT}

socket = l:TCP_NODELAY=1
socket = r:TCP_NODELAY=1

setgid = $SUSER
setuid = $SUSER
debug = $SDEBUG
" > /tmp/etc/stunnel.conf

    for i in $STUNNELSERVS; do
      LISTEN="$(echo $i | cut -d'~' -f1)"
      HOST="$(echo $i | cut -d'~' -f2)"
      SERVICE="$(echo $i | cut -d'~' -f3)"

      if [ "$IPV6" = "yes" ]; then
        # If LISTEN does not contain a ':' accept using IPv6/IPv4
        case "$LISTEN" in
          *:*) ;;
            *) LISTEN=":::$LISTEN" ;;
        esac
      fi

      echo "[$HOST-$SERVICE]
accept = $LISTEN
connect = $HOST:$SERVICE
" >> /tmp/etc/stunnel.conf
    done
  fi
}

start () {

  if [ -f /etc/stunnel.conf ]; then
    echo "Starting stunnel..."
    stunnel /etc/stunnel.conf
  fi
}

stop () {

  if [ -f /var/run/stunnel/stunnel.pid ]; then
    echo "Stopping stunnel..."
    kill $(cat /var/run/stunnel/stunnel.pid) >/dev/null 2>&1
  fi
}

case $1 in

start)
  start
  ;;

stop)
  stop
  ;;

init)
  init
  start
  ;;

restart)
  stop
  sleep 2
  start
  ;;

*)
  echo "Usage: start|stop|restart"
  ;;

esac

