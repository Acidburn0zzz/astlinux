#!/bin/sh

. /etc/rc.conf

init () {
  mkdir -p /var/run/sshd

  if [ -d /mnt/kd/ssh ]; then
    ln -snf /mnt/kd/ssh /tmp/etc/ssh
  else
    mkdir /tmp/etc/ssh
  fi

  PORT="${SSHDPORT:-22}"
  RSTAT="${SSHDROOT:-yes}"

  if [ -f /mnt/kd/sshd.conf ]; then
    cp /mnt/kd/sshd.conf /tmp/etc/ssh/sshd_config
  else
    echo "# Autogenerated.  Do not edit.
# A manually generated sshd_config will use /mnt/kd/sshd.conf if it exists.
" > /tmp/etc/ssh/sshd_config

    echo "Protocol 2
Port $PORT" >> /tmp/etc/ssh/sshd_config

    if [ "$IPV6" = "yes" ]; then
      echo "ListenAddress ::" >> /tmp/etc/ssh/sshd_config
    fi
    echo "ListenAddress 0.0.0.0" >> /tmp/etc/ssh/sshd_config

    echo "
PermitRootLogin $RSTAT

IPQoS		cs2 af41

Subsystem       sftp    /usr/libexec/sftp-server" >> /tmp/etc/ssh/sshd_config

    if [ -f /etc/issue.net ]; then
      echo "Banner /etc/issue.net" >> /tmp/etc/ssh/sshd_config
    fi
  fi

  # if it's not a link (to /mnt/kd) then populate it from /stat/etc/ssh
  if [ ! -L /tmp/etc/ssh ]; then
    cp -a /stat/etc/ssh/* /tmp/etc/ssh/
  else
    # or even if it is...
    if [ ! -f /tmp/etc/ssh/moduli ]; then
      cp -p /stat/etc/ssh/moduli /tmp/etc/ssh/
    fi
  fi

  # Generate server keys
  unset IFS
  for i in ssh_host_key ssh_host_rsa_key ssh_host_dsa_key ssh_host_ecdsa_key; do
    file="/tmp/etc/ssh/$i"
    if [ ! -f "$file" ]; then
      msg="Generating ssh server public/private key type:"
      case $i in
        ssh_host_key)
          echo -n "$msg rsa1..."
          /usr/bin/ssh-keygen -q -t rsa1 -b 1024 -f "$file" -N ''
          ;;
        ssh_host_rsa_key)
          echo -n "$msg rsa..."
          /usr/bin/ssh-keygen -q -t rsa -f "$file" -N ''
          ;;
        ssh_host_dsa_key)
          echo -n "$msg dsa..."
          /usr/bin/ssh-keygen -q -t dsa -f "$file" -N ''
          ;;
        ssh_host_ecdsa_key)
          echo -n "$msg ecdsa..."
          /usr/bin/ssh-keygen -q -t ecdsa -f "$file" -N ''
          ;;
      esac
      echo " done."
    fi
  done

  # in case /root isn't persistent.
  if [ ! -d /root/.ssh ]; then
    mkdir /root/.ssh
  fi

  if [ ! -f /root/.ssh/authorized_keys ]; then
    if [ -d /stat/etc/ssh_keys ]; then
      for i in $(ls /stat/etc/ssh_keys); do
        if [ -f "/stat/etc/ssh_keys/${i}" ]; then
          cat "/stat/etc/ssh_keys/${i}" >> /root/.ssh/authorized_keys
        fi
      done
    fi

    if [ -d /mnt/kd/ssh_keys ]; then
      for i in $(ls /mnt/kd/ssh_keys); do
        if [ -f "/mnt/kd/ssh_keys/${i}" ]; then
          cat "/mnt/kd/ssh_keys/${i}" >> /root/.ssh/authorized_keys
        fi
      done
    fi
  fi

  # Automatically create "/mnt/kd/ssh_root_keys" directory if it doesn't exist
  if [ ! -d /mnt/kd/ssh_root_keys ]; then
    mkdir /mnt/kd/ssh_root_keys 2>/dev/null     # will fail on virgin RO filesystem, ignore stderr
  fi

  # Generate root user keys
  if [ -d /mnt/kd/ssh_root_keys ]; then
    for i in id_dsa id_ecdsa; do
      file="/mnt/kd/ssh_root_keys/$i"
      if [ ! -f "$file" ]; then
        msg="Generating ssh root user public/private key type:"
        case $i in
          id_dsa)
            echo -n "$msg dsa..."
            # run in a background process since DSA takes a long time...
            (
              nice /usr/bin/ssh-keygen -q -t dsa -f "$file" -N ''
              if [ ! -f /root/.ssh/id_dsa ]; then
                cp -p "$file"* /root/.ssh/
              fi
            ) >/dev/null 2>&1 &
            ;;
          id_ecdsa)
            echo -n "$msg ecdsa..."
            /usr/bin/ssh-keygen -q -t ecdsa -f "$file" -N ''
            ;;
        esac
        echo " done."
      fi
    done
  fi

  for i in rsa dsa ecdsa; do
    if [ ! -f "/root/.ssh/id_${i}" ]; then
      if [ -f "/mnt/kd/ssh_root_keys/id_${i}" ]; then
        cp -p "/mnt/kd/ssh_root_keys/id_${i}"* /root/.ssh/
      fi
    fi
  done
}

start () {
  if [ -f /etc/ssh/ssh_host_key ]; then
    echo "Starting sshd..."
    /usr/sbin/sshd
  fi
}

stop () {
  if [ -f /var/run/sshd.pid ]; then
    echo "Stopping sshd..."
    kill `cat /var/run/sshd.pid`
  fi
}

case $1 in

start)
  start
  ;;

stop)
  stop
  ;;

init)
  init
  start
  ;;

restart)
  stop
  sleep 2
  start
  ;;

*)
  echo "Usage: start|stop|restart"
  ;;

esac
